name: PR

on:
  pull_request:
    branches: ["main"]
    types: ["opened", "synchronize", "reopened"]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - run: deno check --all --frozen --reload
      - run: deno fmt --check
      - run: deno lint

  compile:
    needs: test

    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - run: mkdir -p ./dist/

      - run: echo "APP_V=$(deno ./etc/version.ts)" >> $GITHUB_ENV
      - run: echo "DIST_MACOS=dist/toy-aarch64-apple-darwin-${{ env.APP_V }}" >> $GITHUB_ENV
      - run: echo "DIST_LINUX=dist/toy-x86_64-unknown-linux-gnu-${{ env.APP_V }}" >> $GITHUB_ENV
      - run: echo "DIST_WINDOWS=dist/toy-x86_64-pc-windows-msvc-${{ env.APP_V }}.exe" >> $GITHUB_ENV

      - run: deno compile --target aarch64-apple-darwin --frozen --reload --output ${{ env.DIST_MACOS }} -ERW main.ts
      - run: deno compile --target x86_64-unknown-linux-gnu --frozen --reload --output ${{ env.DIST_LINUX }} -ERW main.ts
      - run: deno compile --target x86_64-pc-windows-msvc --frozen --reload --output ${{ env.DIST_WINDOWS }}.exe -ERW main.ts

      - run: if ${{ env.DIST_LINUX }} --version | grep -q '${{ env.APP_V }}'; then exit 0; else exit 1; fi

      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            ${{ env.DIST_MACOS }}
            ${{ env.DIST_LINUX }}
            ${{ env.DIST_WINDOWS }}.exe
          compression-level: 9
